name: Test and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    env:
      UPLOAD_FOLDER: uploads
      THUMBNAIL_FOLDER: uploads/thumbnails
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create upload directories
      run: |
        mkdir -p $UPLOAD_FOLDER
        mkdir -p $THUMBNAIL_FOLDER
        # Also create the default structure in case env vars are not properly set
        mkdir -p uploads/thumbnails
    
    - name: Run tests
      run: |
        python test_app.py
    
    - name: Run tests with pytest (verbose)
      run: |
        python -m pytest test_app.py -v

  create-release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    env:
      UPLOAD_FOLDER: uploads
      THUMBNAIL_FOLDER: uploads/thumbnails
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get latest tag
      id: get-latest-tag
      run: |
        # Get the latest tag, if no tags exist, start with v0.0.0
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"
    
    - name: Calculate new version
      id: calc-version
      run: |
        LATEST_TAG=${{ steps.get-latest-tag.outputs.latest-tag }}
        
        # Remove 'v' prefix and split version
        VERSION=${LATEST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment patch version
        PATCH=$((PATCH + 1))
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
    
    - name: Generate changelog
      id: changelog
      run: |
        LATEST_TAG=${{ steps.get-latest-tag.outputs.latest-tag }}
        NEW_VERSION=${{ steps.calc-version.outputs.new-version }}
        
        echo "## What's Changed in $NEW_VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [ "$LATEST_TAG" != "v0.0.0" ]; then
          # Get commits since last tag
          git log $LATEST_TAG..HEAD --pretty=format:"- %s" --no-merges >> CHANGELOG.md 2>/dev/null || echo "- Initial release" >> CHANGELOG.md
        else
          echo "- Initial release" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...$NEW_VERSION" >> CHANGELOG.md
        
        # Set multiline output
        {
          echo 'changelog<<EOF'
          cat CHANGELOG.md
          echo EOF
        } >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.calc-version.outputs.new-version }}
        name: "Mandaditos CDN ${{ steps.calc-version.outputs.new-version }}"
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Success notification
      run: |
        echo "âœ… All tests passed!"
        echo "ðŸš€ Created release: ${{ steps.calc-version.outputs.new-version }}"
        echo "ðŸ“¦ Release is now available on GitHub"
